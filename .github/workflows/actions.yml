# name: Terraform

# env:
#   working-directry: ./user

# on: 
#   push: 
#     branches: ["main", "master"]

#     workflow_dispatch:



# jobs:
#   terraform:
#     runs-on: ubuntu-latest
#     env: 
      # AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID }}
      # AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
      # AWS_SESSION_TOKEN: ${{secrets.AWS_SESSION_TOKEN}}
#     steps:
#       - uses: actions/checkout@v3

#       - name: Run a one-line script
#         run: echo this is code for terraform file

#       - uses: actions/checkout@v2
#       - uses: hashicorp/setup-terraform@v1

#       - name: Terraform fmt
#         id: fmt
#         run: terraform fmt -check

#       - name: Terraform Init
#         id: init
#         run: terraform init
#         working-directory: ${{env.working-directry}}

#       - name: Terraform Validate
#         id: validate
#         run: terraform validate 
#         working-directory: ${{env.working-directry}}

#       - name: Terraform Plan
#         id: plan
#         run: terraform plan 
#         working-directory: ${{env.working-directry}}
      
#       - name: Terrafom Plan status
#         if: steps.plan.outcome == 'failure'
#         run: echo somthing error place check the code once!!!!!!

#       - name: Terraform apply
#         id: apply
#         if: steps.plan.outcome != 'failure'
#         run: terraform apply -auto-approve
#         working-directory: ${{env.working-directry}}

#       # - name: Terraform destroy
#       #   id: destroy
#       #   run: terraform destroy -auto-approve
#       #   working-directory: ${{env.working-directry}}
    



name: "Terraform"

on:
  workflow_dispatch:
    inputs:
      # Working directory input from user.
      resource:
        type: choice
        description: Choose the resource
        options:
        - ./user
      # Terraform action you want to perform
      action:
        description: 'Terraform Action to Perform'
        type: choice
        options:
        - Terraform_apply
        - Terraform_destroy

jobs:
  terraform_apply:
    name: "Terraform_apply"
    if: ${{ github.event.inputs.action == 'Terraform_apply' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.event.inputs.resource }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init
        env:
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.REGION }}
      
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve 
        env:
            AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
            AWS_SESSION_TOKEN: ${{secrets.AWS_SESSION_TOKEN}}
            AWS_DEFAULT_REGION: ${{ secrets.REGION }}
    
  terraform_destroy:
    name: "Terraform_destroy"
    if: ${{ github.event.inputs.action == 'Terraform_destroy' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.event.inputs.resource }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_SESSION_TOKEN: ${{secrets.AWS_SESSION_TOKEN}}
          AWS_DEFAULT_REGION: ${{ secrets.REGION }}
      
      - name: Terraform Destroy
        id: destroy
        working-directory: ${{ github.event.inputs.resource }}
        run: terraform destroy -auto-approve 
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_SESSION_TOKEN: ${{secrets.AWS_SESSION_TOKEN}}
          AWS_DEFAULT_REGION: ${{ secrets.REGION }}
